// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`init > common > pkgJson 1`] = `
{
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.18",
    "weapp-tailwindcss": "^3.7.0",
  },
  "scripts": {
    "postinstall": "weapp-tw patch",
  },
}
`;

exports[`init > common > postcssConfig 1`] = `
"module.exports = {
  plugins: {
    tailwindcss: {},
    // 假如框架已经内置了 \`autoprefixer\`，可以去除下一行
    autoprefixer: {},
  },
}
"
`;

exports[`init > common > tailwindConfig 1`] = `
"/** @type {import('tailwindcss').Config} */
module.exports = {
  // 这里给出了一份 uni-app /taro 通用示例，具体要根据你自己项目的目录结构进行配置
  // 不在 content 包括的文件内，你编写的 class，是不会生成对应的css工具类的
  content: ['./public/index.html', './src/**/*.{wxml,html,js,ts,jsx,tsx,vue}'],
  // 其他配置项
  // ...
  corePlugins: {
    // 小程序不需要 preflight 和 container，因为这主要是给 h5 的，如果你要同时开发小程序和 h5 端，你应该使用环境变量来控制它
    preflight: false,
    container: false,
  },
}
"
`;

exports[`init > esm > pkgJson 1`] = `
{
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.18",
    "weapp-tailwindcss": "^3.7.0",
  },
  "scripts": {
    "postinstall": "weapp-tw patch",
  },
  "type": "module",
}
`;

exports[`init > esm > postcssConfig 1`] = `
"export default {
  plugins: {
    tailwindcss: {},
    // 假如框架已经内置了 \`autoprefixer\`，可以去除下一行
    autoprefixer: {},
  },
}
"
`;

exports[`init > esm > tailwindConfig 1`] = `
"/** @type {import('tailwindcss').Config} */
export default {
  // 这里给出了一份 uni-app /taro 通用示例，具体要根据你自己项目的目录结构进行配置
  // 不在 content 包括的文件内，你编写的 class，是不会生成对应的css工具类的
  content: ['./public/index.html', './src/**/*.{wxml,html,js,ts,jsx,tsx,vue}'],
  // 其他配置项
  // ...
  corePlugins: {
    // 小程序不需要 preflight 和 container，因为这主要是给 h5 的，如果你要同时开发小程序和 h5 端，你应该使用环境变量来控制它
    preflight: false,
    container: false,
  },
}
"
`;
